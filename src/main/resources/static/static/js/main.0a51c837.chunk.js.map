{"version":3,"sources":["actions/projectActions.js","actions/types.js","components/Project/ProjectItem.js","components/Project/CreateProjectButton.js","components/Dashboard.js","securityUtils/setJWTToken.js","actions/securityActions.js","components/Layout/Header.js","components/Project/AddProject.js","components/Project/UpdateProject.js","reducers/errorReducer.js","reducers/projectReducer.js","reducers/backlogReducer.js","reducers/securityReducer.js","reducers/index.js","store.js","components/ProjectBoard/ProjectTasks/ProjectTask.js","actions/backlogActions.js","components/ProjectBoard/Backlog.js","components/ProjectBoard/ProjectBoard.js","components/ProjectBoard/ProjectTasks/AddProjectTask.js","components/ProjectBoard/ProjectTasks/UpdateProjectTask.js","components/Layout/Landing.js","components/UserManagement/Register.js","components/UserManagement/Login.js","securityUtils/SecureRoute.js","App.js","serviceWorker.js","index.js"],"names":["createProject","project","history","dispatch","a","axios","post","push","type","payload","response","data","ProjectItem","onDeleteClick","id","props","deleteProject","this","className","projectIdentifier","projectName","description","to","onClick","bind","Component","connect","window","confirm","delete","CreateProjectButton","Fragment","Dashboard","getProjects","projects","map","key","state","get","res","setJWTToken","token","defaults","headers","common","logout","localStorage","removeItem","Header","location","href","headerLinks","security","validToken","user","userIsAuthenticated","fullName","userIsNotAuthenticated","data-toggle","data-target","AddProject","start_date","end_date","errors","onChange","onSubmit","nextProps","setState","e","target","name","value","preventDefault","newProject","classnames","placeholder","UpdateProject","match","params","getProject","updateProject","disabled","initialState","project_tasks","project_task","booleanActionPayload","combineReducers","action","filter","backlog","projectSequence","middleware","thunk","ReactReduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","ProjectTask","backlog_id","pt_id","deleteProjectTask","priorityString","priorityClass","priority","summary","acceptanceCriteria","Backlog","tasks","project_tasks_prop","todoItems","inProgressItems","doneItems","i","length","project_task_status","status","ProjectBoard","getBacklog","BoardContent","projectNotFound","role","boardAlgorithm","AddProjectTask","dueDate","newTask","addProjectTask","UpdateProjectTask","create_At","getProjectTask","updateProjectTask","patch","Landing","Register","username","password","confirmPassword","psuh","newUser","createNewUser","Login","LoginRequest","login","setItem","decoded","jwt_decode","component","otherProps","render","jwtToken","decoded_jwtToken","currentTime","Date","now","exp","App","exact","path","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gWAIaA,EAAgB,SAACC,EAASC,GAAV,8CAAsB,WAAMC,GAAN,SAAAC,EAAA,+EAErCC,IAAMC,KAAK,eAAgBL,GAFU,OAG3CC,EAAQK,KAAK,cAGbJ,EAAS,CACLK,KCXc,aDYdC,QAAS,KAR8B,gDAW3CN,EAAS,CACLK,KChBc,aDiBdC,QAAS,KAAIC,SAASC,OAbiB,yDAAtB,uDEEvBC,E,4MAEFC,cAAgB,SAAAC,GACZ,EAAKC,MAAMC,cAAcF,I,uDAGnB,IACEb,EAAYgB,KAAKF,MAAjBd,QACR,OACI,yBAAKiB,UAAU,aACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,0BAAMA,UAAU,WAAWjB,EAAQkB,oBAEvC,yBAAKD,UAAU,2BACX,4BAAKjB,EAAQmB,aACb,2BAAInB,EAAQoB,cAEhB,yBAAKH,UAAU,8BACX,wBAAIA,UAAU,cACV,kBAAC,IAAD,CAAMI,GAAE,wBAAmBrB,EAAQkB,oBAC/B,wBAAID,UAAU,yBACV,uBAAGA,UAAU,6BAAb,oBAGR,kBAAC,IAAD,CAAMI,GAAE,yBAAoBrB,EAAQkB,oBAChC,wBAAID,UAAU,0BACV,uBAAGA,UAAU,mBAAb,0BAGR,wBAAIA,UAAU,yBACVK,QACIN,KAAKJ,cAAcW,KACfP,KACAhB,EAAQkB,oBAGhB,uBAAGD,UAAU,2BAAb,6B,GAtCVO,aAsDXC,cACX,KACA,CAAEV,cFhBuB,SAAAF,GAAE,8CAAI,WAAMX,GAAN,SAAAC,EAAA,0DAE3BuB,OAAOC,QACH,sDAHuB,gCAMrBvB,IAAMwB,OAAN,uBAA6Bf,IANR,OAO3BX,EAAU,CACNK,KCnDkB,iBDoDlBC,QAASK,IATc,2CAAJ,wDEchBY,CAGbd,GClDakB,EAVa,WACxB,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CAAMT,GAAG,cAAcJ,UAAU,uBAAjC,sBCCNc,E,kLAGEf,KAAKF,MAAMkB,gB,+BAGL,IAEEC,EAAajB,KAAKF,MAAMd,QAAxBiC,SAER,OACI,yBAAKhB,UAAU,YACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,yBAAd,YACA,6BACA,kBAAC,EAAD,MAEA,6BACA,6BACCgB,EAASC,KAAI,SAAAlC,GAAO,OACjB,kBAAC,EAAD,CAAamC,IAAKnC,EAAQa,GAAIb,QAASA,e,GAtB3CwB,aAyCTC,eAJS,SAAAW,GAAK,MAAK,CAC9BpC,QAASoC,EAAMpC,WAGsB,CAACgC,YJ1Bf,yDAAM,WAAM9B,GAAN,eAAAC,EAAA,sEACXC,IAAMiC,IAAI,oBADC,OACvBC,EADuB,OAE7BpC,EAAU,CACNK,KCxBoB,eDyBpBC,QAAS8B,EAAI5B,OAJY,2CAAN,wDI0BZe,CAAyCM,GCtCzCQ,EARK,SAAAC,GACbA,EACCpC,IAAMqC,SAASC,QAAQC,OAAvB,cAAiDH,SAE1CpC,IAAMqC,SAASC,QAAQC,OAAvB,e,iBC+CFC,EAAS,kBAAM,SAAA1C,GACxB2C,aAAaC,WAAW,YACxBP,GAAY,GACZrC,EAAS,CACLK,KL7CwB,mBK8CxBC,QAAS,OCpDXuC,E,uKAGE/B,KAAKF,MAAM8B,SACXlB,OAAOsB,SAASC,KAAO,M,+BAGjB,IAoDFC,EApDC,EAEsBlC,KAAKF,MAAMqC,SAA/BC,EAFF,EAEEA,WAAYC,EAFd,EAEcA,KAEbC,EACF,yBAAKrC,UAAU,2BAA2BJ,GAAG,cACzC,wBAAII,UAAU,sBACV,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWgC,KAAK,cAA7B,eAMR,wBAAIhC,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,cAC1B,uBAAGJ,UAAU,4BAA4BoC,EAAKE,WAGtD,wBAAItC,UAAU,YACV,kBAAC,IAAD,CACIA,UAAU,WACVI,GAAG,UACHC,QAASN,KAAK4B,OAAOrB,KAAKP,OAH9B,aAaVwC,EACF,yBAAKvC,UAAU,2BAA2BJ,GAAG,cAEzC,wBAAII,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,aAA9B,YAIJ,wBAAIJ,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,UAA9B,YAgBhB,OALI6B,EADAE,GAAcC,EACAC,EAEAE,EAId,yBAAKvC,UAAU,uDACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAMA,UAAU,wBAAwBI,GAAG,KAA3C,oCAGA,4BACIJ,UAAU,iBACVV,KAAK,SACLkD,cAAY,WACZC,cAAY,eAEZ,0BAAMzC,UAAU,yBAEnBiC,Q,GAjFA1B,aAiGNC,eAJS,SAAAW,GAAK,MAAK,CAC9Be,SAAUf,EAAMe,YAGoB,CAACP,UAA1BnB,CAAmCsB,G,gDChG5CY,E,kDACF,aAAc,IAAD,8BACT,gBAEKvB,MAAM,CACPjB,YAAa,GACbD,kBAAmB,GACnBE,YAAa,GACbwC,WAAY,GACZC,SAAU,GACVC,OAAQ,IAGZ,EAAKC,SAAW,EAAKA,SAASxC,KAAd,gBAChB,EAAKyC,SAAW,EAAKA,SAASzC,KAAd,gBAbP,E,sEAiBa0C,GACnBA,EAAUH,QACT9C,KAAKkD,SAAS,CAACJ,OAAQG,EAAUH,W,+BAIhCK,GAELnD,KAAKkD,SAAL,eAAgBC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAIpCH,GAGLA,EAAEI,iBAEF,IAAMC,EAAW,CACbrD,YAAaH,KAAKoB,MAAMjB,YACxBD,kBAAmBF,KAAKoB,MAAMlB,kBAC9BE,YAAaJ,KAAKoB,MAAMhB,YACxBwC,WAAY5C,KAAKoB,MAAMwB,WACvBC,SAAU7C,KAAKoB,MAAMyB,UAEzB7C,KAAKF,MAAMf,cACPyE,EACAxD,KAAKF,MAAMb,W,+BAKT,IACC6D,EAAW9C,KAAKoB,MAAhB0B,OACP,OACI,6BACI,yBAAK7C,UAAU,YACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,yBAAd,uBACA,6BACA,0BAAM+C,SAAUhD,KAAKgD,UACjB,yBAAK/C,UAAU,cACX,2BACIV,KAAK,OACLU,UACIwD,IACI,+BACA,CAAC,aAAcX,EAAO3C,cAG9BuD,YAAY,eACZL,KAAO,cACPC,MAAOtD,KAAKoB,MAAMjB,YAClB4C,SAAU/C,KAAK+C,WAElBD,EAAO3C,aACJ,yBAAKF,UAAU,oBACV6C,EAAO3C,cAIpB,yBAAKF,UAAU,cACX,2BACIV,KAAK,OACLU,UACIwD,IACI,+BACA,CAAC,aAAcX,EAAO5C,oBAG9BwD,YAAY,oBACZL,KAAK,oBACLC,MAAOtD,KAAKoB,MAAMlB,kBAClB6C,SAAU/C,KAAK+C,WAElBD,EAAO5C,mBACJ,yBAAKD,UAAU,oBACV6C,EAAO5C,oBAIpB,yBAAKD,UAAU,cACX,8BACIA,UACIwD,IACI,+BACA,CAAC,aAAcX,EAAO1C,cAG9BsD,YAAY,sBACZL,KAAK,cACLC,MAAOtD,KAAKoB,MAAMhB,YAClB2C,SAAU/C,KAAK+C,WAElBD,EAAO1C,aACJ,yBAAKH,UAAU,oBACV6C,EAAO1C,cAIpB,0CACA,yBAAKH,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVoD,KAAK,aACLC,MAAOtD,KAAKoB,MAAMwB,WAClBG,SAAU/C,KAAK+C,YAGvB,kDACA,yBAAK9C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVoD,KAAK,WACLC,MAAOtD,KAAKoB,MAAMyB,SAClBE,SAAU/C,KAAK+C,YAIvB,2BACIxD,KAAK,SACLU,UAAU,6C,GA9IzBO,aAmKVC,eAJS,SAAAW,GAAK,MAAI,CAC7B0B,OAAQ1B,EAAM0B,UAKd,CAAE/D,iBAFS0B,CAGZkC,GCvKGgB,E,kDAEF,aAAc,IAAD,8BACT,gBAEKvC,MAAQ,CACTvB,GAAI,GACJM,YAAa,GACbD,kBAAmB,GACnBE,YAAa,GACbwC,WAAY,GACZC,SAAU,GACVC,OAAQ,IAEZ,EAAKC,SAAW,EAAKA,SAASxC,KAAd,gBAChB,EAAKyC,SAAW,EAAKA,SAASzC,KAAd,gBAbP,E,sEAgBa0C,GAEnBA,EAAUH,QACT9C,KAAKkD,SAAS,CAAEJ,OAAQG,EAAUH,SAHL,MAa7BG,EAAUjE,QANVa,EAP6B,EAO7BA,GACAM,EAR6B,EAQ7BA,YACAD,EAT6B,EAS7BA,kBACAE,EAV6B,EAU7BA,YACAwC,EAX6B,EAW7BA,WACAC,EAZ6B,EAY7BA,SAGJ7C,KAAKkD,SAAS,CACVrD,KACAM,cACAD,oBACAE,cACAwC,aACAC,e,0CAIY,IACRhD,EAAOG,KAAKF,MAAM8D,MAAMC,OAAxBhE,GACRG,KAAKF,MAAMgE,WAAWjE,EAAIG,KAAKF,MAAMb,W,+BAGhCkE,GACLnD,KAAKkD,SAAL,eAAgBC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAGpCH,GACLA,EAAEI,iBAEF,IAAMQ,EAAgB,CAClBlE,GAAIG,KAAKoB,MAAMvB,GACfM,YAAaH,KAAKoB,MAAMjB,YACxBD,kBAAmBF,KAAKoB,MAAMlB,kBAC9BE,YAAaJ,KAAKoB,MAAMhB,YACxBwC,WAAY5C,KAAKoB,MAAMwB,WACvBC,SAAU7C,KAAKoB,MAAMyB,UAEzB7C,KAAKF,MAAMf,cAAcgF,EAAe/D,KAAKF,MAAMb,W,+BAG7C,IACE6D,EAAW9C,KAAKoB,MAAhB0B,OACR,OACI,yBAAK7C,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,yBAAd,uBACA,6BACA,0BAAM+C,SAAUhD,KAAKgD,UACjB,yBAAK/C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO3C,cAEzBuD,YAAY,eACZL,KAAK,cACLC,MAAOtD,KAAKoB,MAAMjB,YAClB4C,SAAU/C,KAAK+C,WAIfD,EAAO3C,aACH,yBAAKF,UAAU,oBAAoB6C,EAAO3C,cAItD,yBAAKF,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVyD,YAAY,oBACZL,KAAK,oBACLC,MAAOtD,KAAKoB,MAAMlB,kBAClB8D,UAAQ,KAGhB,yBAAK/D,UAAU,cACX,8BACIA,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO1C,cAEzBsD,YAAY,qBACZL,KAAK,cACLC,MAAOtD,KAAKoB,MAAMhB,YAClB2C,SAAU/C,KAAK+C,WAIfD,EAAO1C,aACH,yBAAKH,UAAU,oBAAoB6C,EAAO1C,cAItD,0CACA,yBAAKH,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVoD,KAAK,aACLC,MAAOtD,KAAKoB,MAAMwB,WAClBG,SAAU/C,KAAK+C,YAGvB,kDACA,yBAAK9C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVoD,KAAK,WACLC,MAAOtD,KAAKoB,MAAMyB,SAClBE,SAAU/C,KAAK+C,YAIvB,2BACIxD,KAAK,SACLU,UAAU,4C,GAhJlBO,aAuKbC,eALS,SAAAW,GAAK,MAAK,CAC9BpC,QAASoC,EAAMpC,QAAQA,QACvB8D,OAAQ1B,EAAM0B,UAKd,CAAEgB,WThJoB,SAACjE,EAAIZ,GAAL,8CAAiB,WAAMC,GAAN,eAAAC,EAAA,+EAGjBC,IAAMiC,IAAN,uBAA0BxB,IAHT,OAG7ByB,EAH6B,OAInCpC,EAAU,CACNK,KClCe,cDmCfC,QAAS8B,EAAI5B,OANkB,gDASnCT,EAAQK,KAAK,cATsB,yDAAjB,uDSgJRP,iBAFH0B,CAGbkD,G,gBC9KIM,EAAe,G,QCAfA,EAAe,CACjBhD,SAAU,GACVjC,QAAS,ICFPiF,EAAe,CACbC,cAAe,GACfC,aAAc,ICFhBF,EAAe,CACjB7B,YAAY,EACZC,KAAM,IAGJ+B,EAAuB,SAAC5E,GAC1B,QAAGA,GCFQ6E,cAAiB,CAC5BvB,OJHW,WAAwC,IAA/B1B,EAA8B,uDAAtB6C,EAAcK,EAAQ,uCAClD,OAAOA,EAAO/E,MACV,ITNkB,aSOd,OAAO+E,EAAO9E,QAElB,QACI,OAAO4B,IIFfpC,QHDW,WAAwC,IAA/BoC,EAA8B,uDAAtB6C,EAAcK,EAAQ,uCAClD,OAAQA,EAAO/E,MACX,IVRoB,eUShB,OAAO,eACA6B,EADP,CAEIH,SAASqD,EAAO9E,UAGxB,IVbmB,cUcf,OAAO,eACA4B,EADP,CAEIpC,QAASsF,EAAO9E,UAGxB,IVlBsB,iBUmBlB,OAAO,eACA4B,EADP,CAEIH,SAAUG,EAAMH,SAASsD,QACrB,SAAAvF,GAAO,OAAIA,EAAQkB,oBAAsBoE,EAAO9E,aAI5D,QACI,OAAO4B,IGrBfoD,QFFW,WAAsC,IAA7BpD,EAA4B,uDAAtB6C,EAAcK,EAAQ,uCAChD,OAAOA,EAAO/E,MAEV,IXFmB,cWGf,OAAO,eAEA6B,EAFP,CAGI8C,cAAeI,EAAO9E,UAG9B,IXRwB,mBWSpB,OAAO,eACA4B,EADP,CAEI+C,aAAcG,EAAO9E,UAG7B,IXb2B,sBWcvB,OAAO,eACA4B,EADP,CAGI8C,cAAe9C,EAAM8C,cAAcK,QAC/B,SAAAJ,GAAY,OAAIA,EAAaM,kBAAoBH,EAAO9E,aAIpE,QACI,OAAO4B,IEvBfe,SDKW,WAAwC,IAA/Bf,EAA8B,uDAAtB6C,EAAcK,EAAQ,uCAClD,OAAQA,EAAO/E,MAEX,IZNwB,mBYOpB,OAAO,eACA6B,EADP,CAEIgB,WAAYgC,EAAqBE,EAAO9E,SACxC6C,KAAMiC,EAAO9E,UAGrB,QACI,OAAO4B,MEtBb6C,EAAe,GACfS,EAAa,CAACC,KAIdC,EAAqBlE,OAAOmE,8BAAgCnE,OAAOmE,+BAmB1DC,EAjBXpE,OAAOqE,UAAUC,UAAUC,SAAS,WAAaL,EACzCM,YACJC,EACAlB,EACAmB,YACIC,IAAe,WAAf,EAAmBX,GACnBE,IAIAM,YACJC,EACAlB,EACAmB,YAAQC,IAAe,WAAf,EAAmBX,KClB7BY,E,4KAEYC,EAAYC,GACtBxF,KAAKF,MAAM2F,kBAAkBF,EAAYC,K,+BAGnC,IAEFE,EACAC,EAFIxB,EAAiBnE,KAAKF,MAAtBqE,aAmBR,OAf2B,IAAxBA,EAAayB,WACZD,EAAgB,uBAChBD,EAAiB,QAGM,IAAxBvB,EAAayB,WACZD,EAAgB,wBAChBD,EAAiB,UAGM,IAAxBvB,EAAayB,WACZD,EAAgB,qBAChBD,EAAiB,OAIjB,yBAAKzF,UAAW,sBACZ,yBAAKA,UAAS,mCAA+B0F,IAA7C,OACSxB,EAAaM,gBADtB,iBACqDiB,GAErD,yBAAKzF,UAAW,sBACZ,wBAAIA,UAAW,cAAckE,EAAa0B,SAC1C,uBAAG5F,UAAW,4BACTkE,EAAa2B,oBAElB,kBAAC,IAAD,CAAMzF,GAAE,6BAAwB8D,EAAajE,kBAArC,YAA0DiE,EAAaM,iBAAmBxE,UAAU,mBAA5G,iBAIA,4BACIA,UAAW,sBACXK,QACIN,KAAKJ,cAAcW,KACfP,KAAMmE,EAAajE,kBACnBiE,EAAaM,kBALzB,gB,GAxCMjE,aA2DXC,cACX,KACA,CAACgF,kBCY4B,SAC7BF,EACAC,GAF6B,8CAG5B,WAAMtG,GAAN,SAAAC,EAAA,0DACEuB,OAAOC,QAAQ,uEADjB,gCAESvB,IAAMwB,OAAN,uBAA6B2E,EAA7B,YAA2CC,IAFpD,OAGGtG,EAAS,CACLK,KhB5EuB,sBgB6EvBC,QAASgG,IALhB,2CAH4B,wDDdlB/E,CAGb6E,GELaS,G,uKAhDP,IAXM,IAGAC,EAFyBhG,KAAKF,MAA5BmG,mBAEyB/E,KAAI,SAAAiD,GAAY,OAC7C,kBAAC,EAAD,CAAahD,IAAKgD,EAAatE,GAAIsE,aAAcA,OAGjD+B,EAAY,GACZC,EAAkB,GAClBC,EAAY,GAERC,EAAE,EAAGA,EAAEL,EAAMM,OAAQD,IAAI,CAC7B,IAAIE,EAAsBP,EAAMK,GAAGvG,MAAMqE,aAAaqC,OAC1B,UAAxBD,GACAL,EAAU5G,KAAK0G,EAAMK,IAGG,gBAAxBE,GACAJ,EAAgB7G,KAAK0G,EAAMK,IAGH,SAAxBE,GACAH,EAAU9G,KAAK0G,EAAMK,IAI7B,OACI,yBAAKpG,UAAW,aACZ,yBAAKA,UAAW,OACZ,yBAAKA,UAAW,YACZ,yBAAKA,UAAW,yBACZ,yBAAKA,UAAW,uCACZ,uCAGPiG,GAEL,yBAAKjG,UAAW,YACZ,yBAAKA,UAAW,yBACZ,yBAAKA,UAAW,qCACZ,6CAGPkG,GAEL,yBAAKlG,UAAW,YACZ,yBAAKA,UAAW,yBACZ,yBAAKA,UAAW,qCACZ,sCAGPmG,S,GApDH5F,aCIhBiG,G,kDAGF,aAAe,IAAD,8BACV,gBACKrF,MAAQ,CACT0B,OAAQ,IAHF,E,gEAOM,IACRjD,EAAOG,KAAKF,MAAM8D,MAAMC,OAAxBhE,GACRG,KAAKF,MAAM4G,WAAW7G,K,gDAGAoD,GACnBA,EAAUH,QACT9C,KAAKkD,SAAS,CAACJ,OAAQG,EAAUH,W,+BAI/B,IAKF6D,EAJI9G,EAAOG,KAAKF,MAAM8D,MAAMC,OAAxBhE,GACAqE,EAAkBlE,KAAKF,MAAM0E,QAA7BN,cAiCR,OAFAyC,EA1BuB,SAAC7D,EAAQoB,GAC5B,OAAGA,EAAcoC,OAAS,EACnBxD,EAAO8D,gBAEF,yBAAK3G,UAAU,iCAAiC4G,KAAK,SACpD/D,EAAO8D,iBAGN9D,EAAO5C,kBAET,yBAAKD,UAAU,iCAAiC4G,KAAK,SACpD/D,EAAO5C,mBAKR,yBAAKD,UAAU,+BAA+B4G,KAAK,SAAnD,kCAMD,kBAAC,GAAD,CAASZ,mBAAoB/B,IAI7B4C,CA9BI9G,KAAKoB,MAAhB0B,OA8B8BoB,GAGlC,yBAAKjE,UAAW,aACZ,kBAAC,IAAD,CAAMI,GAAE,0BAAqBR,GAAMI,UAAW,wBAC1C,uBAAGA,UAAW,sBAAd,yBAEJ,6BACA,6BACC0G,O,GA/DUnG,aAgFZC,gBALS,SAAAW,GAAK,MAAK,CAC9BoD,QAASpD,EAAMoD,QACf1B,OAAQ1B,EAAM0B,UAKd,CAAE4D,WFjEoB,SAClBnB,GADkB,8CAEjB,WAAMrG,GAAN,eAAAC,EAAA,+EAEqBC,IAAMiC,IAAN,uBAA0BkE,IAF/C,OAESjE,EAFT,OAGGpC,EAAS,CACLK,KhBtBW,cgBuBXC,QAAS8B,EAAI5B,OALpB,gDAQGR,EAAS,CACLK,KhBnCU,agBoCVC,QAAS,KAAMC,SAASC,OAV/B,yDAFiB,wDE+DXe,CAGbgG,ICnFIM,G,kDAEF,WAAYjH,GAAQ,IAAD,0BAEPD,GADR,cAAMC,IACcA,MAAM8D,MAAMC,OAAxBhE,GAFO,OAIf,EAAKuB,MAAQ,CACTyE,QAAS,GACTC,mBAAoB,GACpBU,OAAQ,GACRZ,SAAU,EACVoB,QAAS,GACT9G,kBAAmBL,EACnBiD,OAAQ,IAEZ,EAAKC,SAAW,EAAKA,SAASxC,KAAd,gBAChB,EAAKyC,SAAW,EAAKA,SAASzC,KAAd,gBAdD,E,sEAiBO0C,GACnBA,EAAUH,QACT9C,KAAKkD,SAAS,CAAEJ,OAAQG,EAAUH,W,+BAKjCK,GAELnD,KAAKkD,SAAL,eAAiBC,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,U,+BAIpCH,GAELA,EAAEI,iBAEF,IAAM0D,EAAQ,CACVpB,QAAS7F,KAAKoB,MAAMyE,QACpBC,mBAAoB9F,KAAKoB,MAAM0E,mBAC/BU,OAAQxG,KAAKoB,MAAMoF,OACnBZ,SAAU5F,KAAKoB,MAAMwE,SACrBoB,QAAShH,KAAKoB,MAAM4F,SAGxBhH,KAAKF,MAAMoH,eACPlH,KAAKoB,MAAMlB,kBACX+G,EACAjH,KAAKF,MAAMb,W,+BAIT,IACEY,EAAOG,KAAKF,MAAM8D,MAAMC,OAAxBhE,GACAiD,EAAW9C,KAAKoB,MAAhB0B,OACR,OACI,yBAAK7C,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CAAMI,GAAE,wBAAmBR,GAAMI,UAAU,iBAA3C,yBAGA,wBAAIA,UAAU,yBAAd,oBACA,uBAAGA,UAAU,oBAAb,+BACA,0BAAM+C,SAAUhD,KAAKgD,UACjB,yBAAK/C,UAAU,cACX,2BACIV,KAAK,OACLU,UACIwD,IACI,+BACA,CAAC,aAAcX,EAAO+C,UAG9BxC,KAAK,UACLK,YAAY,uBACZJ,MAAOtD,KAAKoB,MAAMyE,QAClB9C,SAAU/C,KAAK+C,WAElBD,EAAO+C,SACJ,yBAAK5F,UAAU,oBACV6C,EAAO+C,UAIpB,yBAAK5F,UAAU,cACX,8BACIA,UAAU,+BACVyD,YAAY,sBACZL,KAAK,qBACLC,MAAOtD,KAAKoB,MAAM0E,mBAClB/C,SAAU/C,KAAK+C,YAGvB,wCACA,yBAAK9C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVoD,KAAK,UACLC,MAAOtD,KAAKoB,MAAM4F,QAClBjE,SAAU/C,KAAK+C,YAGvB,yBAAK9C,UAAU,cACX,4BACIA,UAAU,+BACVoD,KAAK,WACLC,MAAOtD,KAAKoB,MAAMwE,SAClB7C,SAAU/C,KAAK+C,UAEf,4BAAQO,MAAO,GAAf,mBACA,4BAAQA,MAAO,GAAf,QACA,4BAAQA,MAAO,GAAf,UACA,4BAAQA,MAAO,GAAf,SAIR,yBAAKrD,UAAU,cACX,4BACIA,UAAU,+BACVoD,KAAK,SACLC,MAAOtD,KAAKoB,MAAMoF,OAClBzD,SAAU/C,KAAK+C,UAEf,4BAAQO,MAAM,IAAd,iBACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,QAAd,UAIR,2BACI/D,KAAK,SACLU,UAAU,4C,GAtIjBO,aA0JdC,gBAJS,SAAAW,GAAK,MAAK,CAC9B0B,OAAQ1B,EAAM0B,UAKd,CAAEoE,eHhKwB,SAC1B3B,EACApB,EACAlF,GAH0B,8CAIzB,WAAMC,GAAN,SAAAC,EAAA,+EAESC,IAAMC,KAAN,uBAA2BkG,GAAcpB,GAFlD,OAGGlF,EAAQK,KAAR,wBAA8BiG,IAC9BrG,EAAS,CACLK,KhBZc,agBadC,QAAS,KANhB,gDASGN,EAAS,CACLK,KhBjBc,agBkBdC,QAAS,KAAMC,SAASC,OAX/B,yDAJyB,wDG8Jfe,CAGZsG,IC5JGI,G,kDAEF,aAAc,IAAD,8BACT,gBAEK/F,MAAQ,CACTvB,GAAI,GACJ4E,gBAAiB,GACjBoB,QAAS,GACTC,mBAAoB,GACpBU,OAAQ,GACRZ,SAAU,GACVoB,QAAS,KACT9G,kBAAmB,GACnBkH,UAAW,GACXtE,OAAQ,IAGZ,EAAKC,SAAW,EAAKA,SAASxC,KAAd,gBAChB,EAAKyC,SAAW,EAAKA,SAASzC,KAAd,gBAjBP,E,gEAoBO,IAAD,EACeP,KAAKF,MAAM8D,MAAMC,OAAvC0B,EADO,EACPA,WAAYC,EADL,EACKA,MACpBxF,KAAKF,MAAMuH,eAAe9B,EAAYC,EAAOxF,KAAKF,MAAMb,W,gDAGlCgE,GAEnBA,EAAUH,QACT9C,KAAKkD,SAAS,CAAEJ,OAAQG,EAAUH,SAHL,MAgB7BG,EAAUkB,aATVtE,EAP6B,EAO7BA,GACA4E,EAR6B,EAQ7BA,gBACAoB,EAT6B,EAS7BA,QACAC,EAV6B,EAU7BA,mBACAU,EAX6B,EAW7BA,OACAZ,EAZ6B,EAY7BA,SACAoB,EAb6B,EAa7BA,QACA9G,EAd6B,EAc7BA,kBACAkH,EAf6B,EAe7BA,UAGJpH,KAAKkD,SAAS,CACVrD,KACA4E,kBACAoB,UACAC,qBACAU,SACAZ,WACAoB,UACA9G,oBACAkH,gB,+BAICjE,GACLnD,KAAKkD,SAAL,eAAgBC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAGpCH,GACLA,EAAEI,iBAEF,IAAM4D,EAAoB,CACtBtH,GAAIG,KAAKoB,MAAMvB,GACf4E,gBAAiBzE,KAAKoB,MAAMqD,gBAC5BoB,QAAS7F,KAAKoB,MAAMyE,QACpBC,mBAAoB9F,KAAKoB,MAAM0E,mBAC/BU,OAAQxG,KAAKoB,MAAMoF,OACnBZ,SAAU5F,KAAKoB,MAAMwE,SACrBoB,QAAQhH,KAAKoB,MAAM4F,QACnB9G,kBAAmBF,KAAKoB,MAAMlB,kBAC9BkH,UAAWpH,KAAKoB,MAAMgG,WAI1BpH,KAAKF,MAAMwH,kBACPtH,KAAKoB,MAAMlB,kBACXF,KAAKoB,MAAMqD,gBACX0C,EACAnH,KAAKF,MAAMb,W,+BAIT,IAEE6D,EAAW9C,KAAKoB,MAAhB0B,OAER,OACI,yBAAK7C,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CAAMI,GAAE,wBAAmBL,KAAKoB,MAAMlB,mBAAqBD,UAAU,iBAArE,yBAGA,wBAAIA,UAAU,yBAAd,uBAGA,uBAAGA,UAAU,oBAAb,iBAA+CD,KAAKoB,MAAMlB,kBAA1D,uBAAiGF,KAAKoB,MAAMqD,iBAC5G,0BAAMzB,SAAUhD,KAAKgD,UACjB,yBAAK/C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO+C,UAEzBxC,KAAK,UACLK,YAAY,uBACZJ,MAAOtD,KAAKoB,MAAMyE,QAClB9C,SAAY/C,KAAK+C,WAGjBD,EAAO+C,SAEH,yBAAK5F,UAAU,oBAAoB6C,EAAO+C,UAItD,yBAAK5F,UAAU,cACX,8BACIA,UAAU,+BACVyD,YAAY,sBACZL,KAAK,qBACLC,MAAOtD,KAAKoB,MAAM0E,mBAClB/C,SAAY/C,KAAK+C,YAGzB,wCACA,yBAAK9C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAU,+BACVoD,KAAK,UACLC,MAAOtD,KAAKoB,MAAM4F,QAClBjE,SAAY/C,KAAK+C,YAGzB,yBAAK9C,UAAU,cACX,4BACIA,UAAU,+BACVoD,KAAK,WACLC,MAAOtD,KAAKoB,MAAMwE,SAClB7C,SAAY/C,KAAK+C,UAEjB,4BAAQO,MAAO,GAAf,mBACA,4BAAQA,MAAO,GAAf,QACA,4BAAQA,MAAO,GAAf,UACA,4BAAQA,MAAO,GAAf,SAIR,yBAAKrD,UAAU,cACX,4BACIA,UAAU,+BACVoD,KAAK,SACLC,MAAOtD,KAAKoB,MAAMoF,OAClBzD,SAAY/C,KAAK+C,UAEjB,4BAAQO,MAAM,IAAd,iBACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,QAAd,UAIR,2BAAO/D,KAAK,SAASU,UAAU,4C,GAxK/BO,aA8LjBC,gBALS,SAAAW,GAAK,MAAK,CAC9B+C,aAAc/C,EAAMoD,QAAQL,aAC5BrB,OAAQ1B,EAAM0B,UAKd,CAAEuE,eJ/JyB,SACvB9B,EACAC,EACAvG,GAHuB,8CAIrB,WAAMC,GAAN,eAAAC,EAAA,+EAEoBC,IAAMiC,IAAN,uBAA0BkE,EAA1B,YAAwCC,IAF5D,OAEQlE,EAFR,OAGEpC,EAAS,CACLK,KhBxCgB,mBgByChBC,QAAS8B,EAAI5B,OALnB,gDAQET,EAAQK,KAAK,cARf,yDAJqB,uDI+JTgI,kBJ/IW,SAC7B/B,EACAC,EACArB,EACAlF,GAJ6B,8CAK5B,WAAMC,GAAN,SAAAC,EAAA,+EAESC,IAAMmI,MAAN,uBAA4BhC,EAA5B,YAA0CC,GAASrB,GAF5D,OAGGlF,EAAQK,KAAR,wBAA8BiG,IAC1BrG,EAAS,CAELK,KhBpEU,agBqEVC,QAAS,KAPpB,gDAUGN,EAAS,CACLK,KhBzEc,agB0EdC,QAAS,KAAMC,SAASC,OAZ/B,yDAL4B,wDI6IlBe,CAGb0G,ICnMIK,G,kLAIKxH,KAAKF,MAAMqC,SAASC,YACnBpC,KAAKF,MAAMb,QAAQK,KAAK,gB,+BAK5B,OACI,yBAAKW,UAAU,WACX,yBAAKA,UAAU,yCACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,kBAAd,oCACA,uBAAGA,UAAU,QAAb,iEAGA,6BACA,kBAAC,IAAD,CAAMA,UAAU,8BAA8BI,GAAG,aAAjD,WAGA,kBAAC,IAAD,CAAMJ,UAAU,gCAAgCI,GAAG,UAAnD,kB,GAxBVG,aA4CPC,gBAJS,SAAAW,GAAK,MAAK,CAC9Be,SAAUf,EAAMe,YAGL1B,CAAyB+G,IC5ClCC,G,kDAEF,aAAc,IAAD,8BACT,gBAEKrG,MAAQ,CACTsG,SAAU,GACVnF,SAAU,GACVoF,SAAU,GACVC,gBAAiB,GACjB9E,OAAQ,IAGZ,EAAKC,SAAW,EAAKA,SAASxC,KAAd,gBAChB,EAAKyC,SAAW,EAAKA,SAASzC,KAAd,gBAZP,E,gEAgBNP,KAAKF,MAAMqC,SAASC,YACnBpC,KAAKF,MAAMb,QAAQ4I,KAAK,gB,gDAIN5E,GACnBA,EAAUH,QACT9C,KAAKkD,SAAS,CAACJ,OAAQG,EAAUH,W,+BAIhCK,GACLnD,KAAKkD,SAAL,eAAgBC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAGpCH,GACLA,EAAEI,iBACF,IAAMuE,EAAU,CACZJ,SAAU1H,KAAKoB,MAAMsG,SACrBnF,SAAUvC,KAAKoB,MAAMmB,SACrBoF,SAAU3H,KAAKoB,MAAMuG,SACrBC,gBAAiB5H,KAAKoB,MAAMwG,iBAGhC5H,KAAKF,MAAMiI,cAAcD,EAAS9H,KAAKF,MAAMb,W,+BAKvC,IAEE6D,EAAW9C,KAAKoB,MAAhB0B,OAER,OACI,yBAAK7C,UAAU,YACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,yBAAd,WACA,uBAAGA,UAAU,oBAAb,uBACA,0BAAM+C,SAAUhD,KAAKgD,UACjB,yBAAK/C,UAAU,cACX,2BACIV,KAAK,OACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAOP,WAEzBmB,YAAY,YACZL,KAAK,WACLC,MAAStD,KAAKoB,MAAMmB,SACpBQ,SAAY/C,KAAK+C,WAGjBD,EAAOP,UACH,yBAAKtC,UAAU,oBACV6C,EAAOP,WAKxB,yBAAKtC,UAAU,cACX,2BACIV,KAAK,QACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO4E,WAEzBhE,YAAY,2BACZL,KAAK,WACLC,MAAStD,KAAKoB,MAAMsG,SACpB3E,SAAY/C,KAAK+C,WAGjBD,EAAO4E,UACP,yBAAKzH,UAAU,oBAAoB6C,EAAO4E,WAIlD,yBAAKzH,UAAU,cACX,2BACIV,KAAK,WACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO6E,WAEzBjE,YAAY,WACZL,KAAK,WACLC,MAAStD,KAAKoB,MAAMuG,SACpB5E,SAAY/C,KAAK+C,WAGjBD,EAAO6E,UACH,yBAAK1H,UAAU,oBACV6C,EAAO6E,WAKxB,yBAAK1H,UAAU,cACX,2BACIV,KAAK,WACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO8E,kBAEzBlE,YAAY,mBACZL,KAAK,kBACLC,MAAStD,KAAKoB,MAAMwG,gBACpB7E,SAAY/C,KAAK+C,WAGjBD,EAAO8E,iBACH,yBAAK3H,UAAU,oBACV6C,EAAO8E,kBAKxB,2BACIrI,KAAK,SACLU,UAAU,yC,GAvIvBO,aA6JRC,gBALS,SAAAW,GAAK,MAAK,CAC9B0B,OAAQ1B,EAAM0B,OACdX,SAAUf,EAAMe,YAKhB,CAAE4F,cjB/JuB,SAACD,EAAS7I,GAAV,8CAAsB,WAAMC,GAAN,SAAAC,EAAA,+EAErCC,IAAMC,KAAK,sBAAuByI,GAFG,OAG3C7I,EAAQK,KAAK,UAEbJ,EAAS,CACLK,KLZc,aKadC,QAAS,KAP8B,gDAU3CN,EAAS,CACLK,KLjBc,aKkBdC,QAAS,KAAMC,SAASC,OAZe,yDAAtB,wDiB6Jde,CAGZgH,IChKGO,G,kDAEF,aAAe,IAAD,8BACV,gBACK5G,MAAQ,CACTsG,SAAU,GACVC,SAAU,GACV7E,OAAQ,IAGZ,EAAKC,SAAW,EAAKA,SAASxC,KAAd,gBAChB,EAAKyC,SAAW,EAAKA,SAASzC,KAAd,gBATN,E,qDAYL4C,GACLnD,KAAKkD,SAAL,eAAgBC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAGpCH,GACLA,EAAEI,iBACF,IAAM0E,EAAe,CACjBP,SAAU1H,KAAKoB,MAAMsG,SACrBC,SAAU3H,KAAKoB,MAAMuG,UAGzB3H,KAAKF,MAAMoI,MAAMD,K,0CAIdjI,KAAKF,MAAMqC,SAASC,YACnBpC,KAAKF,MAAMb,QAAQK,KAAK,gB,gDAIN2D,GAElBA,EAAUd,SAASC,YACnBpC,KAAKF,MAAMb,QAAQK,KAAK,cAGxB2D,EAAUH,QACV9C,KAAKkD,SAAS,CAAEJ,OAAQG,EAAUH,W,+BAIhC,IAEEA,EAAW9C,KAAKoB,MAAhB0B,OAER,OACI,yBAAK7C,UAAU,SACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,yBAAd,UACA,0BAAM+C,SAAUhD,KAAKgD,UACjB,yBAAK/C,UAAU,cACX,2BACIV,KAAK,QACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO4E,WAEzBhE,YAAY,gBACZL,KAAK,WACLC,MAAStD,KAAKoB,MAAMsG,SACpB3E,SAAY/C,KAAK+C,WAGjBD,EAAO4E,UACH,yBAAKzH,UAAU,oBAAoB6C,EAAO4E,WAItD,yBAAKzH,UAAU,cACX,2BACIV,KAAK,WACLU,UAAWwD,IAAW,+BAAgC,CAClD,aAAcX,EAAO6E,WAEzBjE,YAAY,WACZL,KAAK,WACLC,MAAStD,KAAKoB,MAAMuG,SACpB5E,SAAY/C,KAAK+C,WAGjBD,EAAO6E,UACH,yBAAK1H,UAAU,oBAAoB6C,EAAO6E,WAItD,2BACIpI,KAAK,SACLU,UAAU,yC,GA5F1BO,aAkHLC,gBALS,SAAAW,GAAK,MAAK,CAC9Be,SAAUf,EAAMe,SAChBW,OAAQ1B,EAAM0B,UAKd,CAAEoF,MlBnGe,SAAAD,GAAY,8CAAI,WAAM/I,GAAN,mBAAAC,EAAA,+EAGXC,IAAMC,KAAK,mBAAoB4I,GAHpB,OAGvB3G,EAHuB,OAMrBE,EAAUF,EAAI5B,KAAd8B,MAGRK,aAAasG,QAAQ,WAAY3G,GAGjCD,EAAYC,GAGN4G,EAAUC,IAAW7G,GAG3BtC,EAAS,CACLK,KL9BoB,mBK+BpBC,QAAS4I,IApBgB,kDAuB7BlJ,EAAS,CACLK,KL/Cc,aKgDdC,QAAS,KAAMC,SAASC,OAzBC,0DAAJ,wDkBiGlBe,CAGbuH,I,SCpGavH,gBAJS,SAAAW,GAAK,MAAK,CAC9Be,SAAUf,EAAMe,YAGL1B,EAjBK,SAAC,GAAD,IAAaD,EAAb,EAAE8H,UAAsBnG,EAAxB,EAAwBA,SAAaoG,EAArC,gDAChB,kBAAC,IAAD,iBACQA,EADR,CAEIC,OAAU,SAAA1I,GAAK,OACa,IAAxBqC,EAASC,WAAsB,kBAAC5B,EAAcV,GAAa,kBAAC,IAAD,CAAUO,GAAG,iBCa9EoI,GAAW5G,aAAa4G,SAC9B,GAAIA,GAAU,CACZlH,EAAYkH,IACZ,IAAMC,GAAmBL,IAAWI,IAGpC3D,EAAM5F,SAAU,CACdK,KzBlB4B,mByBmB5BC,QAASkJ,KAIX,IAAMC,GAAcC,KAAKC,MAAQ,IAC9BH,GAAiBI,IAAMH,KACxB7D,EAAM5F,SAAS0C,KACflB,OAAOsB,SAASC,KAAK,K,IAoCV8G,G,uKA9BX,OACE,kBAAC,IAAD,CAAUjE,MAAOA,GACf,kBAAC,IAAD,KACE,yBAAK7E,UAAU,OACb,kBAAC,EAAD,MAIA,kBAAC,IAAD,CAAO+I,OAAK,EAACC,KAAK,IAAIX,UAAWd,KACjC,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,YAAYX,UAAWb,KACzC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,SAASX,UAAWN,KAKtC,kBAAC,IAAD,KACE,kBAAC,GAAD,CAAagB,OAAK,EAACC,KAAK,aAAaX,UAAWvH,IAChD,kBAAC,GAAD,CAAaiI,OAAK,EAACC,KAAK,cAAcX,UAAW3F,IACjD,kBAAC,GAAD,CAAaqG,OAAK,EAACC,KAAK,qBAAqBX,UAAW3E,IACxD,kBAAC,GAAD,CAAaqF,OAAK,EAACC,KAAK,oBAAoBX,UAAW7B,KACvD,kBAAC,GAAD,CAAauC,OAAK,EAACC,KAAK,sBAAsBX,UAAWvB,KACzD,kBAAC,GAAD,CAAaiC,OAAK,EAACC,KAAK,wCAAwCX,UAAWnB,a,GAvBvE3G,aC9BE0I,QACW,cAA7BxI,OAAOsB,SAASmH,UAEe,UAA7BzI,OAAOsB,SAASmH,UAEhBzI,OAAOsB,SAASmH,SAASvF,MACvB,2DCZNwF,IAASZ,OACP,kBAAC,IAAMa,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBxE,WACrBA,UAAUyE,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a51c837.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { GET_ERRORS, GET_PROJECTS, GET_PROJECT, DELETE_PROJECT} from \"./types\";\n\n\nexport const createProject = (project, history) => async dispatch => {\n    try {\n        await axios.post(\"/api/project\", project)\n        history.push(\"/dashboard\");\n\n        // everytime we create a valid new project, do cleanup on errors\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n    } catch (err) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        });\n    }\n};\n\nexport const getProjects = () => async dispatch => {\n    const res = await axios.get(\"/api/project/all\")\n    dispatch ({\n        type: GET_PROJECTS,\n        payload: res.data\n    });\n};\n\n\nexport const getProject = (id, history) => async dispatch => {\n\n    try {\n        const res = await axios.get(`/api/project/${id}`)\n        dispatch ({\n            type: GET_PROJECT,\n            payload: res.data\n        });\n    } catch (error) {\n        history.push(\"/dashboard\");\n    }\n\n};\n\n\nexport const deleteProject = id => async dispatch => {\n    if(\n        window.confirm(\n            \"Are you sure that you want to delete the project? \"\n        )\n    ) {\n        await axios.delete(`/api/project/${id}`)\n        dispatch ({\n            type: DELETE_PROJECT,\n            payload: id\n        });\n    }\n};","export const GET_ERRORS = \"GET_ERRORS\";\nexport const GET_PROJECTS = \"GET_PROJECTS\";\nexport const GET_PROJECT = \"GET_PROJECT\";\nexport const DELETE_PROJECT = \"DELETE_PROJECT\";\n\n\n// Types for BACKLOG ACTIONS\n\nexport const GET_BACKLOG = \"GET_BACKLOG\";\nexport const GET_PROJECT_TASK = \"GET_PROJECT_TASK\";\nexport const DELETE_PROJECT_TASK = \"DELETE_PROJECT_TASK\";\n\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\n","import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { deleteProject } from \"../../actions/projectActions\";\n\nclass ProjectItem extends Component {\n\n    onDeleteClick = id => {\n        this.props.deleteProject(id);\n    };\n\n    render() {\n        const { project } = this.props;\n        return (\n            <div className=\"container\">\n                <div className=\"card card-body bg-light mb-3\">\n                    <div className=\"row\">\n                        <div className=\"col-2\">\n                            <span className=\"mx-auto\">{project.projectIdentifier}</span>\n                        </div>\n                        <div className=\"col-lg-6 col-md-4 col-8\">\n                            <h3>{project.projectName}</h3>\n                            <p>{project.description}</p>\n                        </div>\n                        <div className=\"col-md-4 d-none d-lg-block\">\n                            <ul className=\"list-group\">\n                                <Link to={`/projectBoard/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item board\">\n                                        <i className=\"fa fa-flag-checkered pr-1\"> Project Board</i>\n                                    </li>\n                                </Link>\n                                <Link to={`/updateProject/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item update\">\n                                        <i className=\"fa fa-edit pr-1\"> Update Project Info</i>\n                                    </li>\n                                </Link>\n                                <li className=\"list-group-item delete\"\n                                    onClick={\n                                        this.onDeleteClick.bind(\n                                            this,\n                                            project.projectIdentifier\n                                        )\n                                    }>\n                                    <i className=\"fa fa-minus-circle pr-1\"> Delete Project</i>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nProjectItem.propTypes={\n    deleteProject: PropTypes.func.isRequired\n};\n\nexport default connect(\n    null,\n    { deleteProject }\n)(ProjectItem);","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nconst CreateProjectButton = () => {\n    return (\n        <React.Fragment>\n            <Link to=\"/addProject\" className=\"btn btn-lg btn-info\">\n                Create a Project\n            </Link>\n        </React.Fragment>\n    );\n};\n\nexport default CreateProjectButton;\n","import React, { Component } from 'react';\nimport ProjectItem from \"./Project/ProjectItem\";\nimport CreateProjectButton from './Project/CreateProjectButton';\nimport { connect } from \"react-redux\";\nimport { getProjects } from \"../actions/projectActions\";\nimport PropTypes from \"prop-types\";\n\nclass Dashboard extends Component {\n\n    componentDidMount(){\n        this.props.getProjects();\n    }\n\n    render() {\n\n        const { projects } = this.props.project;\n\n        return (\n            <div className=\"projects\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h1 className=\"display-4 text-center\">Projects</h1>\n                        <br />\n                        <CreateProjectButton />\n\n                        <br />\n                        <hr />\n                        {projects.map(project => (\n                            <ProjectItem key={project.id} project={project} />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\n\nDashboard.propTypes = {\n    project : PropTypes.object.isRequired,\n    getProjects: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    project: state.project\n});\n\nexport default connect(mapStateToProps,  {getProjects})(Dashboard);","import axios from \"axios\";\n\nconst setJWTToken = token => {\n    if(token) {\n        axios.defaults.headers.common[\"Authorization\"] = token;\n    } else  {\n        delete axios.defaults.headers.common[\"Authorization\"];\n    }\n};\n\nexport default setJWTToken;","import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport setJWTToken from \"../securityUtils/setJWTToken\";\nimport jwt_decode from \"jwt-decode\";\n\n\nexport const createNewUser = (newUser, history) => async dispatch => {\n    try {\n        await axios.post(\"/api/users/register\", newUser);\n        history.push(\"/login\");\n\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        });\n    }\n};\n\nexport const login = LoginRequest => async dispatch => {\n    try {\n        // post login request\n        const res = await axios.post(\"/api/users/login\", LoginRequest);\n\n        // extract token from res.data\n        const { token } = res.data;\n\n        // store the token in the token localStorage\n        localStorage.setItem(\"jwtToken\", token);\n        \n        // set token in header\n        setJWTToken(token);\n        \n        // decode token on React\n        const decoded = jwt_decode(token);\n\n        // dispatch to our securityReducer\n        dispatch({\n            type: SET_CURRENT_USER,\n            payload: decoded\n        });\n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        });\n    }  \n};\n\nexport const logout = () => dispatch => {\n    localStorage.removeItem(\"jwtToken\");\n    setJWTToken(false);\n    dispatch({\n        type: SET_CURRENT_USER,\n        payload: {}\n    });\n};","import React, { Component } from 'react'\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../../actions/securityActions\";\n\nclass Header extends Component {\n\n    logout() {\n        this.props.logout();\n        window.location.href = \"/\";\n    }\n\n    render() {\n\n        const {validToken, user} = this.props.security;\n\n        const userIsAuthenticated = (\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/dashboard\">\n                            Dashboard\n                        </a>\n                    </li>\n                </ul>\n\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/dashboard\">\n                            <i className=\"fas fa-user-circle mr-1\"/>{user.fullName}\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link \n                            className=\"nav-link\" \n                            to=\"/logout\" \n                            onClick={this.logout.bind(this)}\n                        >\n                            Logout\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n\n\n        const userIsNotAuthenticated = (\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/register\">\n                            Sign Up\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/login\">\n                            Login\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n\n        let headerLinks;\n\n        if (validToken && user) {\n            headerLinks = userIsAuthenticated;\n        } else {\n            headerLinks = userIsNotAuthenticated;\n        }\n\n        return (\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\n                <div className=\"container\">\n                    <Link className=\"nav-link navbar-brand\" to=\"/\">\n                        Personal Project Management Tool\n                    </Link>\n                    <button \n                        className=\"navbar-toggler\" \n                        type=\"button\" \n                        data-toggle=\"collapse\" \n                        data-target=\"#mobile-nav\"\n                    >\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n                    {headerLinks}\n                </div>\n            </nav>\n        )\n    }\n}\n\nHeader.propTypes = {\n    logout: PropTypes.func.isRequired,\n    security: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    security: state.security\n});\n\nexport default connect(mapStateToProps, {logout})(Header);","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { createProject } from \"../../actions/projectActions\";\nimport classnames from 'classnames';\n\n\nclass AddProject extends Component {\n    constructor(){\n        super()\n\n        this.state={\n            projectName: \"\",\n            projectIdentifier: \"\",\n            description: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            errors: {}\n        };\n\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    // life cycle hooks\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.errors) {\n            this.setState({errors: nextProps.errors});\n        }\n    }\n\n    onChange(e) {\n        // set a new state\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n\n    onSubmit(e) {\n\n        // prevent the form from reloading\n        e.preventDefault();\n\n        const newProject={\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            start_date: this.state.start_date,\n            end_date: this.state.end_date\n        }\n        this.props.createProject(\n            newProject, \n            this.props.history\n        );\n    }\n\n\n    render() {\n        const{ errors } = this.state;\n        return (\n            <div>\n                <div className=\"register\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-8 m-auto\">\n                                <h5 className=\"display-4 text-center\">Create Project form</h5>\n                                <hr />\n                                <form onSubmit={this.onSubmit}>\n                                    <div className=\"form-group\">\n                                        <input\n                                            type=\"text\"\n                                            className={\n                                                classnames(\n                                                    \"form-control form-control-lg\",\n                                                    {\"is-invalid\": errors.projectName}\n                                                )\n                                            }\n                                            placeholder=\"Project Name\"\n                                            name = \"projectName\"\n                                            value={this.state.projectName}\n                                            onChange={this.onChange}\n                                        />\n                                        {errors.projectName && (\n                                            <div className=\"invalid-feedback\">\n                                                {errors.projectName}\n                                            </div>\n                                        )}\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <input\n                                            type=\"text\"\n                                            className={\n                                                classnames(\n                                                    \"form-control form-control-lg\",\n                                                    {\"is-invalid\": errors.projectIdentifier}\n                                                )\n                                            }\n                                            placeholder=\"Unique Project ID\"\n                                            name=\"projectIdentifier\"\n                                            value={this.state.projectIdentifier}\n                                            onChange={this.onChange}\n                                        />\n                                        {errors.projectIdentifier && (\n                                            <div className=\"invalid-feedback\">\n                                                {errors.projectIdentifier}\n                                            </div>\n                                        )}\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <textarea\n                                            className={\n                                                classnames(\n                                                    \"form-control form-control-lg\",\n                                                    {\"is-invalid\": errors.description}\n                                                )\n                                            }\n                                            placeholder=\"Project Description\"\n                                            name=\"description\"\n                                            value={this.state.description}\n                                            onChange={this.onChange}\n                                        />\n                                        {errors.description && (\n                                            <div className=\"invalid-feedback\">\n                                                {errors.description}\n                                            </div>\n                                        )}\n                                    </div>\n                                    <h6>Start Date</h6>\n                                    <div className=\"form-group\">\n                                        <input\n                                            type=\"date\"\n                                            className=\"form-control form-control-lg\"\n                                            name=\"start_date\"\n                                            value={this.state.start_date}\n                                            onChange={this.onChange}\n                                        />\n                                    </div>\n                                    <h6>Estimated End Date</h6>\n                                    <div className=\"form-group\">\n                                        <input\n                                            type=\"date\"\n                                            className=\"form-control form-control-lg\"\n                                            name=\"end_date\"\n                                            value={this.state.end_date}\n                                            onChange={this.onChange}\n                                        />\n                                    </div>\n\n                                    <input\n                                        type=\"submit\"\n                                        className=\"btn btn-primary btn-block mt-4\"\n                                    />\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nAddProject.propTypes = {\n    createProject: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state =>({\n    errors: state.errors\n})\n\nexport default connect (\n    mapStateToProps,\n    { createProject }\n) (AddProject);\n\n","import React, { Component } from \"react\";\nimport { getProject, createProject } from \"../../actions/projectActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\n\nclass UpdateProject extends Component {\n    // set state\n    constructor(){\n        super()\n\n        this.state = {\n            id: \"\",\n            projectName: \"\",\n            projectIdentifier: \"\",\n            description: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            errors: {}\n        }\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        if(nextProps.errors) {\n            this.setState({ errors: nextProps.errors });\n        }\n\n        const {\n            id,\n            projectName,\n            projectIdentifier,\n            description,\n            start_date,\n            end_date,\n        } = nextProps.project;\n\n        this.setState({\n            id,\n            projectName,\n            projectIdentifier,\n            description,\n            start_date,\n            end_date,\n        })\n    }\n\n    componentDidMount(){\n        const { id } = this.props.match.params;\n        this.props.getProject(id, this.props.history);\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value })\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        const updateProject = {\n            id: this.state.id,\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            start_date: this.state.start_date,\n            end_date: this.state.end_date,\n        }\n        this.props.createProject(updateProject, this.props.history);\n    }\n\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className=\"project\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center\">Update Project form</h5>\n                            <hr />\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.projectName\n                                        })}\n                                        placeholder=\"Project Name\"\n                                        name=\"projectName\"\n                                        value={this.state.projectName}\n                                        onChange={this.onChange}\n                                    />\n                                    {\n                                        // display backend validation errors\n                                        errors.projectName && (\n                                            <div className=\"invalid-feedback\">{errors.projectName}</div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control form-control-lg\"\n                                        placeholder=\"Unique Project ID\"\n                                        name=\"projectIdentifier\"\n                                        value={this.state.projectIdentifier}\n                                        disabled\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.description\n                                        })}\n                                        placeholder=\"Project Descrption\"\n                                        name=\"description\"\n                                        value={this.state.description}\n                                        onChange={this.onChange}\n                                    />\n                                    {\n                                        // display backend validation errors\n                                        errors.description && (\n                                            <div className=\"invalid-feedback\">{errors.description}</div>\n                                        )\n                                    }\n                                </div>\n                                <h6>Start Date</h6>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"date\"\n                                        className=\"form-control form-control-lg\"\n                                        name=\"start_date\"\n                                        value={this.state.start_date}\n                                        onChange={this.onChange}\n                                    />\n                                </div>\n                                <h6>Estimated End Date</h6>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"date\"\n                                        className=\"form-control form-control-lg\"\n                                        name=\"end_date\"\n                                        value={this.state.end_date}\n                                        onChange={this.onChange}\n                                    />\n                                </div>\n\n                                <input\n                                    type=\"submit\"\n                                    className=\"btn btn-primary btn-block mt-4\"\n                                />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nUpdateProject.propTypes = {\n    getProject: PropTypes.func.isRequired,\n    createProject: PropTypes.func.isRequired,\n    project: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    project: state.project.project,\n    errors: state.errors\n});\n\nexport default connect(\n    mapStateToProps,\n    { getProject, createProject }\n)(UpdateProject);","import { GET_ERRORS } from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case GET_ERRORS:\n            return action.payload;\n\n        default:\n            return state;\n    }\n}","import { GET_PROJECT, GET_PROJECTS, DELETE_PROJECT } from \"../actions/types\";\n\nconst initialState = {\n    projects: [],\n    project: {}\n}\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case GET_PROJECTS:\n            return {\n                ...state,\n                projects:action.payload\n            };\n\n        case GET_PROJECT:\n            return {\n                ...state,\n                project: action.payload\n            };\n\n        case DELETE_PROJECT:\n            return {\n                ...state,\n                projects: state.projects.filter(\n                    project => project.projectIdentifier !== action.payload\n                )\n            };\n\n        default:\n            return state;\n    }\n}\n","import {GET_BACKLOG, GET_PROJECT_TASK, DELETE_PROJECT_TASK} from \"../actions/types\";\n\nconst initialState = {\n        project_tasks: [],\n        project_task: {}\n}\n\nexport default function(state=initialState, action) {\n    switch(action.type) {\n\n        case GET_BACKLOG:\n            return {\n                // spread operator\n                ...state,\n                project_tasks: action.payload\n            }\n\n        case GET_PROJECT_TASK:\n            return {\n                ...state,\n                project_task: action.payload\n            }\n\n        case DELETE_PROJECT_TASK:\n            return {\n                ...state,\n                // this makes delete action will auto refresh board afterwards\n                project_tasks: state.project_tasks.filter(\n                    project_task => project_task.projectSequence !== action.payload\n                )\n            };\n\n        default:\n            return state;\n    }\n\n}","import { SET_CURRENT_USER } from \"../actions/types\";\n\nconst initialState = {\n    validToken: false,\n    user: {} \n}\n\nconst booleanActionPayload = (payload) => {\n    if(payload) {\n        return true\n    } else {\n        return false\n    }\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        \n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                validToken: booleanActionPayload(action.payload),\n                user: action.payload\n            } \n\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport errorReducer from \"./errorReducer\";\nimport projectReducer from \"./projectReducer\";\nimport backlogReducer from \"./backlogReducer\";\nimport securityReducer from \"./securityReducer\";\n\nexport default combineReducers ({\n    errors: errorReducer,\n    project: projectReducer,\n    backlog: backlogReducer,\n    security: securityReducer\n});\n","import {createStore, applyMiddleware, compose} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\nconst middleware = [thunk];\n\nlet store;\n\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools ) {\n    store = createStore(\n        rootReducer, \n        initialState, \n        compose(\n            applyMiddleware(...middleware), \n            ReactReduxDevTools\n        )\n    );\n} else {\n    store = createStore(\n        rootReducer, \n        initialState, \n        compose(applyMiddleware(...middleware))\n    );\n}\n\nexport default store;","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { deleteProjectTask } from \"../../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nclass ProjectTask extends Component {\n\n    onDeleteClick(backlog_id, pt_id) {\n        this.props.deleteProjectTask(backlog_id, pt_id);\n    }\n\n    render() {\n        const { project_task } = this.props;\n        let priorityString;\n        let priorityClass;\n\n        if(project_task.priority===1){\n            priorityClass = \"bg-danger text-light\"\n            priorityString = \"HIGH\"\n        }\n\n        if(project_task.priority===2){\n            priorityClass = \"bg-warning text-light\"\n            priorityString = \"MEDIUM\"\n        }\n\n        if(project_task.priority===3){\n            priorityClass = \"bg-info text-light\"\n            priorityString = \"LOW\"\n        }\n\n        return (\n            <div className =\"card mb-1 bg-light\">\n                <div className ={`card-header text-primary ${priorityClass}`}>\n                    ID: {project_task.projectSequence} -- Priority: {priorityString}\n                </div>\n                <div className =\"card-body bg-light\">\n                    <h5 className =\"card-title\">{project_task.summary}</h5>\n                    <p className =\"card-text text-truncate \">\n                        {project_task.acceptanceCriteria}\n                    </p>\n                    <Link to={`/updateProjectTask/${project_task.projectIdentifier}/${project_task.projectSequence}`} className=\"btn btn-primary\">\n                        View / Update\n                    </Link>\n\n                    <button \n                        className =\"btn btn-danger ml-4\" \n                        onClick={\n                            this.onDeleteClick.bind(\n                                this, project_task.projectIdentifier, \n                                project_task.projectSequence\n                            )\n                        }\n                    >Delete</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nProjectTask.propTypes = {\n    deleteProjectTask: PropTypes.func.isRequired\n};\n\nexport default connect(\n    null, \n    {deleteProjectTask}\n)(ProjectTask);\n","import axios from \"axios\";\nimport { GET_ERRORS, GET_BACKLOG, GET_PROJECT_TASK, DELETE_PROJECT_TASK } from \"./types\";\n\nexport const addProjectTask = (\n    backlog_id, \n    project_task, \n    history\n) => async dispatch => {\n    try {\n        await axios.post(`/api/backlog/${backlog_id}`, project_task);\n        history.push(`/projectBoard/${backlog_id}`);\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        });\n    }\n\n};\n\nexport const getBacklog = (\n        backlog_id\n    ) => async dispatch => {\n        try {\n            const res = await axios.get(`/api/backlog/${backlog_id}`);\n            dispatch({\n                type: GET_BACKLOG,\n                payload: res.data\n            });\n        } catch (error) {\n            dispatch({\n                type: GET_ERRORS,\n                payload: error.response.data\n            });\n        }\n    };\n\n export const getProjectTask = (\n        backlog_id, \n        pt_id, \n        history\n     ) => async dispatch => {\n        try {\n            const res = await axios.get(`/api/backlog/${backlog_id}/${pt_id}`);\n            dispatch({\n                type: GET_PROJECT_TASK,\n                payload: res.data\n            })\n        } catch (error) {\n            history.push(\"/dashboard\");\n        }\n    };\n\nexport const updateProjectTask = (\n    backlog_id,\n    pt_id,\n    project_task,\n    history\n) => async dispatch => {\n    try {\n        await axios.patch(`/api/backlog/${backlog_id}/${pt_id}`, project_task);\n        history.push(`/projectBoard/${backlog_id}`);\n            dispatch({\n                // clear errors that persist in state\n                type: GET_ERRORS,\n                payload: {}\n            });\n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        });\n    }\n};\n\nexport const deleteProjectTask = (\n    backlog_id, \n    pt_id\n) => async dispatch => {\n    if(window.confirm('You are deleting project task ${pt_id, this action CANNOT be undone')) {\n        await axios.delete(`/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch({\n            type: DELETE_PROJECT_TASK,\n            payload: pt_id\n        })\n    }\n}","import React, { Component } from 'react';\nimport ProjectTask from \"./ProjectTasks/ProjectTask\";\n\nclass Backlog extends Component {\n    render() {\n        const { project_tasks_prop } = this.props;\n\n        const tasks = project_tasks_prop.map(project_task => (\n            <ProjectTask key={project_task.id} project_task={project_task} />\n        ));\n\n        let todoItems = [];\n        let inProgressItems = [];\n        let doneItems = [];\n\n        for(let i=0; i<tasks.length; i++){\n            let project_task_status = tasks[i].props.project_task.status;\n            if (project_task_status === \"TO_DO\") {\n                todoItems.push(tasks[i]);\n            }\n                    \n            if (project_task_status === \"IN_PROGRESS\") {\n                inProgressItems.push(tasks[i]);\n            }\n            \n            if (project_task_status === \"DONE\") {\n                doneItems.push(tasks[i]);\n            }\n        }\n\n        return (\n            <div className =\"container\">\n                <div className =\"row\">\n                    <div className =\"col-md-4\">\n                        <div className =\"card text-center mb-2\">\n                            <div className =\"card-header bg-secondary text-white\">\n                                <h3>TO DO</h3>\n                            </div>\n                        </div>\n                        {todoItems}        \n                    </div>\n                    <div className =\"col-md-4\">\n                        <div className =\"card text-center mb-2\">\n                            <div className =\"card-header bg-primary text-white\">\n                                <h3>In Progress</h3>\n                            </div>\n                        </div>\n                        {inProgressItems}\n                    </div>\n                    <div className =\"col-md-4\">\n                        <div className =\"card text-center mb-2\">\n                            <div className =\"card-header bg-success text-white\">\n                                <h3>Done</h3>\n                            </div>\n                        </div>\n                        {doneItems}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Backlog;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Backlog from \"./Backlog\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { getBacklog } from \"../../actions/backlogActions\";\n\nclass ProjectBoard extends Component {\n\n    // constructor to handle errors\n    constructor() {\n        super();\n        this.state = {\n            errors: {}\n        }\n    }\n\n    componentDidMount(){\n        const { id } = this.props.match.params;\n        this.props.getBacklog(id);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.errors) {\n            this.setState({errors: nextProps.errors});\n        }\n    }\n\n    render() {\n        const { id } = this.props.match.params;\n        const { project_tasks } = this.props.backlog;\n        const { errors } = this.state;\n\n        let BoardContent;\n\n        const boardAlgorithm = (errors, project_tasks) => {\n            if(project_tasks.length < 1) {\n                if(errors.projectNotFound){\n                    return (\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\n                        {errors.projectNotFound}\n                    </div>\n                    ); \n                } else if(errors.projectIdentifier){\n                    return (\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\n                        {errors.projectIdentifier}\n                    </div>\n                    ); \n                } else {\n                    return (\n                        <div className=\"alert alert-info text-center\" role=\"alert\">\n                            No Project Tasks on this board\n                        </div>\n                    ) \n                } \n            } else {\n                return <Backlog project_tasks_prop={project_tasks} />;\n            }\n        }\n\n        BoardContent = boardAlgorithm(errors, project_tasks);\n\n        return (\n            <div className =\"container\">\n                <Link to={`/addProjectTask/${id}`} className =\"btn btn-primary mb-3\">\n                    <i className =\"fas fa-plus-circle\"> Create Project Task</i>\n                </Link>\n                <br />\n                <hr />\n                {BoardContent}\n            </div>\n        );   \n    }\n}\n\nProjectBoard.propTypes = {\n    backlog: PropTypes.object.isRequired,\n    getBacklog: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    backlog: state.backlog,\n    errors: state.errors\n});\n\nexport default connect(\n    mapStateToProps, \n    { getBacklog }\n)(ProjectBoard);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport classnames from \"classnames\";\nimport {addProjectTask} from \"../../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\n\nclass AddProjectTask extends Component {\n\n    constructor(props) {\n        super(props)\n        const { id } = this.props.match.params;\n    \n        this.state = {\n            summary: \"\",\n            acceptanceCriteria: \"\",\n            status: \"\",\n            priority: 0,\n            dueDate: \"\",\n            projectIdentifier: id,\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.errors) {\n            this.setState({ errors: nextProps.errors });\n        }\n    }\n\n    // on change\n    onChange(e) {\n        // set a new state\n        this.setState({ [e.target.name]:e.target.value });\n    }\n\n    // on submit\n    onSubmit(e) {\n        // prevent the form from reloading\n        e.preventDefault();\n        \n        const newTask={\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate: this.state.dueDate,\n        };\n\n        this.props.addProjectTask(\n            this.state.projectIdentifier, \n            newTask, \n            this.props.history\n        );\n    }\n\n    render() {\n        const { id } = this.props.match.params;\n        const { errors } = this.state;\n        return (\n            <div className=\"add-PBI\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link to={`/projectBoard/${id}`} className=\"btn btn-light\">\n                                Back to Project Board\n                            </Link>\n                            <h4 className=\"display-4 text-center\">Add Project Task</h4>\n                            <p className=\"lead text-center\">Project Name + Project Code</p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"text\" \n                                        className={\n                                            classnames(\n                                                \"form-control form-control-lg\", \n                                                {\"is-invalid\": errors.summary}\n                                            )\n                                        }\n                                        name=\"summary\" \n                                        placeholder=\"Project Task summary\"\n                                        value={this.state.summary}\n                                        onChange={this.onChange}\n                                    />\n                                    {errors.summary && (\n                                        <div className=\"invalid-feedback\">\n                                            {errors.summary}\n                                        </div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea \n                                        className=\"form-control form-control-lg\" \n                                        placeholder=\"Acceptance Criteria\" \n                                        name=\"acceptanceCriteria\"\n                                        value={this.state.acceptanceCriteria}\n                                        onChange={this.onChange}\n                                    />\n                                </div>\n                                <h6>Due Date</h6>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"date\" \n                                        className=\"form-control form-control-lg\" \n                                        name=\"dueDate\"\n                                        value={this.state.dueDate}\n                                        onChange={this.onChange}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <select \n                                        className=\"form-control form-control-lg\" \n                                        name=\"priority\"\n                                        value={this.state.priority}\n                                        onChange={this.onChange}\n                                    >\n                                        <option value={0}>Select Priority</option>\n                                        <option value={1}>High</option>\n                                        <option value={2}>Medium</option>\n                                        <option value={3}>Low</option>\n                                    </select>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <select \n                                        className=\"form-control form-control-lg\" \n                                        name=\"status\"\n                                        value={this.state.status}\n                                        onChange={this.onChange}\n                                    >\n                                        <option value=\"\">Select Status</option>\n                                        <option value=\"TO_DO\">TO DO</option>\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                </div>\n\n                                <input \n                                    type=\"submit\" \n                                    className=\"btn btn-primary btn-block mt-4\" \n                                />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAddProjectTask.propTypes = {\n    addProjectTask: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    errors: state.errors\n});\n\nexport default connect(\n    mapStateToProps, \n    { addProjectTask }\n) (AddProjectTask);","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\nimport { getProjectTask, updateProjectTask } from \"../../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\n\nclass UpdateProjectTask extends Component {\n\n    constructor(){\n        super();\n \n        this.state = {\n            id: \"\",\n            projectSequence: \"\",\n            summary: \"\",\n            acceptanceCriteria: \"\",\n            status: \"\",\n            priority: \"\",\n            dueDate: null,\n            projectIdentifier: \"\",\n            create_At: \"\",\n            errors: {}\n        };\n\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n    \n    componentDidMount(){\n        const { backlog_id, pt_id } = this.props.match.params;\n        this.props.getProjectTask(backlog_id, pt_id, this.props.history);\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        if(nextProps.errors) {\n            this.setState({ errors: nextProps.errors });\n        }\n\n        const {\n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            status,\n            priority,\n            dueDate,\n            projectIdentifier,\n            create_At\n        } = nextProps.project_task;\n\n        this.setState({\n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            status,\n            priority,\n            dueDate,\n            projectIdentifier,\n            create_At\n        });\n    }\n\n    onChange(e){\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    onSubmit(e){\n        e.preventDefault();\n\n        const UpdateProjectTask = {\n            id: this.state.id,\n            projectSequence: this.state.projectSequence,\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate:this.state.dueDate,\n            projectIdentifier: this.state.projectIdentifier,\n            create_At: this.state.create_At\n        }\n\n        // update project task action\n        this.props.updateProjectTask(\n            this.state.projectIdentifier, \n            this.state.projectSequence, \n            UpdateProjectTask, \n            this.props.history\n        );\n    }\n\n    render() {\n\n        const { errors } = this.state;\n\n        return (\n            <div className=\"add-PBI\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link to={`/projectBoard/${this.state.projectIdentifier}`} className=\"btn btn-light\">\n                                Back to Project Board\n                            </Link>\n                            <h4 className=\"display-4 text-center\">\n                                Update Project Task\n                            </h4>\n                            <p className=\"lead text-center\">Project Name: {this.state.projectIdentifier} + Project Task ID: {this.state.projectSequence}</p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"text\" \n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.summary\n                                        })} \n                                        name=\"summary\" \n                                        placeholder=\"Project Task summary\"\n                                        value={this.state.summary}\n                                        onChange = {this.onChange}\n                                    />\n                                    {\n                                        errors.summary && (\n                                            // display error msg from the server side\n                                            <div className=\"invalid-feedback\">{errors.summary}</div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea \n                                        className=\"form-control form-control-lg\" \n                                        placeholder=\"Acceptance Criteria\" \n                                        name=\"acceptanceCriteria\"\n                                        value={this.state.acceptanceCriteria}\n                                        onChange = {this.onChange}\n                                    ></textarea>\n                                </div>\n                                <h6>Due Date</h6>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"date\" \n                                        className=\"form-control form-control-lg\" \n                                        name=\"dueDate\" \n                                        value={this.state.dueDate}\n                                        onChange = {this.onChange}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <select \n                                        className=\"form-control form-control-lg\" \n                                        name=\"priority\"\n                                        value={this.state.priority}\n                                        onChange = {this.onChange}\n                                    >\n                                        <option value={0}>Select Priority</option>\n                                        <option value={1}>High</option>\n                                        <option value={2}>Medium</option>\n                                        <option value={3}>Low</option>\n                                    </select>\n                                </div>\n        \n                                <div className=\"form-group\">\n                                    <select \n                                        className=\"form-control form-control-lg\" \n                                        name=\"status\"\n                                        value={this.state.status}\n                                        onChange = {this.onChange}\n                                    >\n                                        <option value=\"\">Select Status</option>\n                                        <option value=\"TO_DO\">TO DO</option>\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                </div>\n        \n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nUpdateProjectTask.propTypes = {\n    getProjectTask: PropTypes.func.isRequired,\n    project_task: PropTypes.object.isRequired,\n    updateProjectTask: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    project_task: state.backlog.project_task,\n    errors: state.errors\n})\n\nexport default connect(\n    mapStateToProps, \n    { getProjectTask, updateProjectTask }\n)(UpdateProjectTask);\n","import React, { Component } from 'react'\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\n\nclass Landing extends Component {\n\n    // when user is logged in, always redirect to /dashboard instead\n    componentDidMount() {\n        if(this.props.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"landing\">\n                <div className=\"light-overlay landing-inner text-dark\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12 text-center\">\n                                <h1 className=\"display-3 mb-4\">Personal Project Management Tool</h1>\n                                <p className=\"lead\">\n                                    Create your account to join active projects or start your own\n                                </p>\n                                <hr />\n                                <Link className=\"btn btn-lg btn-primary mr-2\" to=\"/register\">\n                                    Sign Up\n                                </Link>\n                                <Link className=\"btn btn-lg btn-secondary mr-2\" to=\"/login\">\n                                    Login\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nLanding.propTypes = {\n    security: PropTypes.object.isRequired\n}\n\nconst mapStateTOProps = state => ({\n    security: state.security\n})\n\nexport default connect(mapStateTOProps)(Landing);","import React, { Component } from 'react';\nimport { createNewUser } from \"../../actions/securityActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\n\nclass Register extends Component {\n\n    constructor(){\n        super();\n\n        this.state = {\n            username: \"\",\n            fullName: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n            errors: {}\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        if(this.props.security.validToken) {\n            this.props.history.psuh(\"/dashboard\");\n        }\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(nextProps.errors){\n            this.setState({errors: nextProps.errors});\n        }\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const newUser = {\n            username: this.state.username,\n            fullName: this.state.fullName,\n            password: this.state.password,\n            confirmPassword: this.state.confirmPassword\n        }\n        \n        this.props.createNewUser(newUser, this.props.history);\n\n    }\n\n\n    render() {\n\n        const { errors } = this.state;\n\n        return (\n            <div className=\"register\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Sign Up</h1>\n                            <p className=\"lead text-center\">Create your Account</p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"text\" \n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.fullName\n                                        })}\n                                        placeholder=\"Full Name\" \n                                        name=\"fullName\"\n                                        value = {this.state.fullName}\n                                        onChange = {this.onChange} \n                                    />\n                                    {\n                                        errors.fullName && (\n                                            <div className=\"invalid-feedback\">\n                                                {errors.fullName}\n                                            </div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"email\" \n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.username\n                                        })}\n                                        placeholder=\"Email Address (Username)\" \n                                        name=\"username\" \n                                        value = {this.state.username}\n                                        onChange = {this.onChange} \n                                    />\n                                    {\n                                        errors.username && (\n                                        <div className=\"invalid-feedback\">{errors.username}</div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"password\" \n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.password\n                                        })}\n                                        placeholder=\"Password\" \n                                        name=\"password\" \n                                        value = {this.state.password}\n                                        onChange = {this.onChange} \n                                    />\n                                    {\n                                        errors.password && (\n                                            <div className=\"invalid-feedback\">\n                                                {errors.password}\n                                            </div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"password\" \n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.confirmPassword\n                                        })}\n                                        placeholder=\"Confirm Password\"\n                                        name=\"confirmPassword\" \n                                        value = {this.state.confirmPassword}\n                                        onChange = {this.onChange} \n                                    />\n                                    {\n                                        errors.confirmPassword && (\n                                            <div className=\"invalid-feedback\">\n                                                {errors.confirmPassword}\n                                            </div>\n                                        )\n                                    }\n                                </div>\n                                <input \n                                    type=\"submit\" \n                                    className=\"btn btn-info btn-block mt-4\" \n                                />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nRegister.propTypes = {\n    createNewUser: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    errors: state.errors,\n    security: state.security\n});\n\nexport default connect(\n    mapStateToProps, \n    { createNewUser }\n) (Register);\n","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../actions/securityActions\";\nimport classnames from \"classnames\";\n\nclass Login extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            username: \"\",\n            password: \"\",\n            errors: {}\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onChange(e){\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    onSubmit(e){\n        e.preventDefault();\n        const LoginRequest = {\n            username: this.state.username,\n            password: this.state.password\n\n        };\n        this.props.login(LoginRequest);\n    }\n\n    componentDidMount() {\n        if(this.props.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        if (nextProps.security.validToken) {\n            this.props.history.push(\"/dashboard\")\n        }\n\n        if (nextProps.errors) {\n            this.setState({ errors: nextProps.errors })\n        }\n    }\n\n    render() {\n\n        const { errors } = this.state;\n\n        return (\n            <div className=\"login\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Log In</h1>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"email\" \n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.username\n                                        })}\n                                        placeholder=\"Email Address\" \n                                        name=\"username\"\n                                        value = {this.state.username}\n                                        onChange = {this.onChange}\n                                    />\n                                    {\n                                        errors.username && (\n                                            <div className=\"invalid-feedback\">{errors.username}</div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"password\" \n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.password\n                                        })} \n                                        placeholder=\"Password\" \n                                        name=\"password\" \n                                        value = {this.state.password}\n                                        onChange = {this.onChange}\n                                    />\n                                    {\n                                        errors.password && (\n                                            <div className=\"invalid-feedback\">{errors.password}</div>\n                                        )\n                                    }\n                                </div>\n                                <input \n                                    type=\"submit\" \n                                    className=\"btn btn-info btn-block mt-4\" \n                                />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nLogin.propTypes = {\n    login: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    security: state.security,\n    errors: state.errors\n});\n\nexport default connect(\n    mapStateToProps, \n    { login }\n)(Login);\n","import React from 'react';\nimport {Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\n\nconst SecureRoute = ({component: Component, security, ...otherProps}) => (\n    <Route \n        {...otherProps} \n        render = {props => \n            security.validToken === true? (<Component {...props}/>) : (<Redirect to=\"login\" />)\n        }\n    />\n);\n\nSecureRoute.propTypes = {\n    security: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    security: state.security\n});\n\nexport default connect(mapStateToProps)(SecureRoute);","import React, { Component } from 'react';\nimport './App.css';\nimport Dashboard from \"./components/Dashboard\";\nimport Header from \"./components/Layout/Header\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport AddProject from './components/Project/AddProject';\nimport UpdateProject from './components/Project/UpdateProject';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport ProjectBoard from './components/ProjectBoard/ProjectBoard';\nimport AddProjectTask from './components/ProjectBoard/ProjectTasks/AddProjectTask';\nimport UpdateProjectTask from './components/ProjectBoard/ProjectTasks/UpdateProjectTask';\nimport Landing from './components/Layout/Landing';\nimport Register from './components/UserManagement/Register';\nimport Login from './components/UserManagement/Login';\nimport jwt_decode from \"jwt-decode\";\nimport setJWTToken from \"./securityUtils/setJWTToken\";\nimport { SET_CURRENT_USER } from \"../src/actions/types\";\nimport { logout } from \"./actions/securityActions\";\nimport SecureRoute from \"./securityUtils/SecureRoute\";\n\n// persists JWT token when refresh pages\nconst jwtToken = localStorage.jwtToken;\nif (jwtToken) {\n  setJWTToken(jwtToken);\n  const decoded_jwtToken = jwt_decode(jwtToken);\n\n\n  store.dispatch ({\n    type: SET_CURRENT_USER,\n    payload: decoded_jwtToken\n  });\n\n  // if token expires, log user out\n  const currentTime = Date.now() / 1000\n  if(decoded_jwtToken.exp < currentTime) {\n    store.dispatch(logout());\n    window.location.href=\"/\";\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <Header />\n            {\n              // public routes\n            }\n            <Route exact path=\"/\" component={Landing} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n\n            {\n              // private routes\n            }\n            <Switch>\n              <SecureRoute exact path=\"/dashboard\" component={Dashboard} />\n              <SecureRoute exact path=\"/addProject\" component={AddProject} />\n              <SecureRoute exact path=\"/updateProject/:id\" component={UpdateProject} />\n              <SecureRoute exact path=\"/projectBoard/:id\" component={ProjectBoard} />\n              <SecureRoute exact path=\"/addProjectTask/:id\" component={AddProjectTask} />\n              <SecureRoute exact path=\"/updateProjectTask/:backlog_id/:pt_id\" component={UpdateProjectTask} />\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}